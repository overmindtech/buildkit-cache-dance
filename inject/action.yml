# Deprecated. Use ../action.yml instead.
name: Inject Cache
description: "Injects the cached data into the docker build(x|kit) process"
inputs:
  cache-source:
    default: cache
    description: "Where the cache is stored in the calling workspace. Default: `cache`"
  cache-target:
    default: /root/.cache/go-build
    description: "Where the cache is stored in the docker container. Default: `/root/.cache/go-build`"
  scratch-dir:
    default: scratch
    description: "Where the action is stores some temporary files for its processing. Default: `scratch`"
runs:
  using: composite
  steps:
    - name: Clean Directories
      shell: bash
      run: |
        rm -Rf ${{ inputs.scratch-dir }} && mkdir -p ${{ inputs.scratch-dir }} ${{ inputs.cache-source }}
    - name: Prepare Timestamp for Layer Cache Busting
      shell: bash
      run: |
        date --iso=ns | tee ${{ inputs.cache-source }}/buildstamp
    - name: Prepare Dancefile to Access Caches
      shell: bash
      run: |
        cat > ${{ inputs.scratch-dir }}/Dancefile.inject <<EOF
        FROM busybox:1
        COPY buildstamp buildstamp
        RUN --mount=type=cache,target=${{ inputs.cache-target }} \
            --mount=type=bind,source=.,target=/var/dance-cache \
            cp -p -R /var/dance-cache/. ${{ inputs.cache-target }} || true
        EOF
        cat ${{ inputs.scratch-dir }}/Dancefile.inject
    - name: Inject Data into Docker Cache
      shell: bash
      run: |
        docker buildx build -f ${{ inputs.scratch-dir }}/Dancefile.inject --tag dance:inject ${{ inputs.cache-source }}
    - name: Clean Directories
      shell: bash
      run: |
        sudo rm -rf ${{ inputs.cache-source }}
